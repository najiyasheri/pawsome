<style>
    .image-upload-slot {
        background-image: url("data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' height='100%25' fill='none' stroke='%23e5e7eb' stroke-width='2' stroke-dasharray='6%2c 14' stroke-dashoffset='0' stroke-linecap='square'/%3e%3c/svg%3e");
    }
</style>
<div class="max-w-4xl mx-auto">
  <div class="mb-6">
    <h1 class="font-bold mb-10 text-2xl">Edit Product</h1>
  </div>
  <div class="bg-white rounded-lg shadow-lg overflow-hidden">
    <form class="p-8" action="/admin/product/edit/<%= product._id %>" method="POST" enctype="multipart/form-data">
      <div class="mb-8">
        <h2 class="text-lg font-semibold text-gray-900 mb-6">Basic Information</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Product Name</label>
            <input type="text" name="name" value="<%= product.name %>"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Product Description</label>
            <input type="text" name="description" value="<%= product.description %>"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Category</label>
            <select name="category"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white">
              <% categories.forEach(category => { %>
                <option value="<%= category._id %>" <%= category._id.toString() === product.categoryId.toString() ? "selected" : "" %>>
                  <%= category.name?.toUpperCase() %>
                </option>
              <% }) %>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Brand</label>
            <input type="text" name="brand" value="<%= product.brand %>"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Price</label>
            <input type="number" name="price" value="<%= product.basePrice %>"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Discount (%)</label>
            <input type="number" name="discount" value="<%= product.discountPercentage %>"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
          </div>
        </div>
      </div>

      <!-- Product Images -->
      <div class="mb-8">
        <h2 class="text-lg font-semibold text-gray-900 mb-6">Product Images</h2>
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
          <!-- Existing Images -->
          <% product.images.forEach((img, idx) => { %>
            <div class="relative existing-image">
              <img src="/Uploads/<%= img %>" class="w-full h-full object-cover rounded-lg">
              <input type="hidden" name="images[<%= idx %>]" value="<%= img %>">
              <button type="button" class="replace-image absolute top-2 right-2 bg-blue-500 text-white text-xs font-bold px-2 py-1 rounded hover:bg-blue-600">Replace</button>
              <div class="absolute -top-2 -right-2 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center">
                <span class="text-white text-xs font-bold"><%= idx+1 %></span>
              </div>
            </div>
          <% }) %>
          <% for(let i = 0; i < Math.max(0, 4 - product.images.length); i++) { %>
            <div class="relative image-upload-slot rounded-lg flex flex-col items-center justify-center cursor-pointer hover:bg-gray-50 transition-colors">
              <div class="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center mb-2">
                <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                </svg>
              </div>
              <span class="text-xs text-gray-500 text-center">Add Image</span>
              <input type="file" name="images[]" accept="image/*" class="hidden">
              <div class="absolute -top-2 -right-2 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center">
                <span class="text-white text-xs font-bold"><%= product.images.length + i + 1 %></span>
              </div>
            </div>
          <% } %>
        </div>
      </div>

      <!-- Product Variants -->
      <div class="mb-8">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-lg font-semibold text-gray-900">Product Variants</h2>
          <button type="button"
            class="add-variant-btn px-4 py-2 text-sm font-medium text-blue-600 bg-blue-50 rounded-md hover:bg-blue-100 transition-colors">
            Add Variant
          </button>
        </div>
        <div class="overflow-x-auto">
          <table class="w-full">
            <thead>
              <tr class="border-b border-gray-200">
                <th class="text-left py-3 px-4">Size</th>
                <th class="text-left py-3 px-4">Additional Price</th>
                <th class="text-left py-3 px-4">Stock</th>
                <th></th>
              </tr>
            </thead>
            <tbody>
              <% variants.forEach(variant => { %>
                <tr class="border-b border-gray-100">
                  <td class="py-4 px-4">
                    <input name="size[]" type="text" value="<%= variant.size %>"
                      class="w-full px-3 py-2 border rounded-md">
                  </td>
                  <td class="py-4 px-4">
                    <input name="additionalPrice[]" type="number" value="<%= variant.additionalPrice %>"
                      class="w-full px-3 py-2 border rounded-md">
                  </td>
                  <td class="py-4 px-4">
                    <input name="stock[]" type="number" value="<%= variant.stock %>"
                      class="w-full px-3 py-2 border rounded-md">
                  </td>
                  <td class="py-4 px-4">
                    <button type="button" class="remove-variant text-red-500 hover:text-red-700">Remove</button>
                  </td>
                </tr>
              <% }) %>
            </tbody>
          </table>
        </div>
      </div>

      <!-- Form Actions -->
      <div class="flex items-center justify-end space-x-4 pt-6 border-t">
        <a href="/admin/product"><button type="button"
            class="px-6 py-2 text-sm font-medium text-gray-700 bg-white border rounded-md">Cancel</button></a>
        <button type="submit"
          class="px-6 py-2 text-sm font-medium text-white bg-yellow-500 rounded-md hover:bg-yellow-600">Update Product</button>
      </div>
    </form>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
  // Image upload functionality for new images
  const imageSlots = document.querySelectorAll('.image-upload-slot');
  imageSlots.forEach(slot => {
    slot.addEventListener('click', function () {
      let input = slot.querySelector('input[type="file"]');
      if (input) {
        input.click();
      }
    });

    const input = slot.querySelector('input[type="file"]');
    if (input) {
      input.addEventListener('change', function (e) {
        const file = e.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = function (e) {
            const placeholders = slot.querySelectorAll('div:not(.image-upload-slot), span');
            placeholders.forEach(el => el.remove());
            const oldImg = slot.querySelector('img');
            if (oldImg) oldImg.remove();
            const img = document.createElement('img');
            img.src = e.target.result;
            img.classList.add('w-full', 'h-full', 'object-cover', 'rounded-lg');
            slot.insertBefore(img, input);
          };
          reader.readAsDataURL(file);
        }
      });
    }
  });

  // Replace existing image functionality
  const replaceImageButtons = document.querySelectorAll('.replace-image');
  replaceImageButtons.forEach(button => {
    button.addEventListener('click', function () {
      const imageContainer = button.closest('.existing-image');
      if (imageContainer) {
        // Get the index from the existing hidden input
        const hiddenInput = imageContainer.querySelector('input[type="hidden"]');
        const index = hiddenInput ? hiddenInput.name.match(/\d+/)[0] : null;

        // Remove existing image and button
        const img = imageContainer.querySelector('img');
        const replaceButton = imageContainer.querySelector('.replace-image');
        if (img) img.remove();
        if (replaceButton) replaceButton.remove();
        if (hiddenInput) hiddenInput.remove();

        // Add image-upload-slot class and content
        imageContainer.classList.remove('existing-image');
        imageContainer.classList.add('image-upload-slot', 'flex', 'flex-col', 'items-center', 'justify-center', 'cursor-pointer', 'hover:bg-gray-50', 'transition-colors');

        // Add placeholder content
        const placeholderDiv = document.createElement('div');
        placeholderDiv.classList.add('w-12', 'h-12', 'bg-gray-100', 'rounded-lg', 'flex', 'items-center', 'justify-center', 'mb-2');
        placeholderDiv.innerHTML = `
          <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
          </svg>
        `;
        const placeholderSpan = document.createElement('span');
        placeholderSpan.classList.add('text-xs', 'text-gray-500', 'text-center');
        placeholderSpan.textContent = 'Add Image';
        const fileInput = document.createElement('input');
        fileInput.type = 'file';
        fileInput.name = index ? `replaceImages[${index}]` : 'images[]'; // Use replaceImages[index] for replacements
        fileInput.accept = 'image/*';
        fileInput.classList.add('hidden');

        // Append new elements
        imageContainer.appendChild(placeholderDiv);
        imageContainer.appendChild(placeholderSpan);
        imageContainer.appendChild(fileInput);

        // Add click event to new input
        imageContainer.addEventListener('click', function () {
          fileInput.click();
        });

        fileInput.addEventListener('change', function (e) {
          const file = e.target.files[0];
          if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
              placeholderDiv.remove();
              placeholderSpan.remove();
              const oldImg = imageContainer.querySelector('img');
              if (oldImg) oldImg.remove();
              const newImg = document.createElement('img');
              newImg.src = e.target.result;
              newImg.classList.add('w-full', 'h-full', 'object-cover', 'rounded-lg');
              imageContainer.insertBefore(newImg, fileInput);
            };
            reader.readAsDataURL(file);
          }
        });
      }
    });
  });

  // Add variant functionality
  const addVariantBtn = document.querySelector('.add-variant-btn');
  const tbody = document.querySelector('tbody');

  addVariantBtn.addEventListener('click', function () {
    const newRow = tbody.querySelector('tr').cloneNode(true);
    newRow.querySelectorAll('input').forEach(input => input.value = '');
    newRow.querySelectorAll('select').forEach(select => select.selectedIndex = 0);
    tbody.appendChild(newRow);
  });

  tbody.addEventListener('click', function (e) {
    if (e.target.classList.contains('remove-variant')) {
      const tr = e.target.closest('tr');
      if (tbody.querySelectorAll('tr').length > 1) {
        tr.remove();
      }
    }
  });
});
</script>
<style>
  .image-upload-slot {
    background-image: url("data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' height='100%25' fill='none' stroke='%23e5e7eb' stroke-width='2' stroke-dasharray='6%2c 14' stroke-dashoffset='0' stroke-linecap='square'/%3e%3c/svg%3e");
  }

  .error {
    color: red;
    font-size: 0.75rem;
    margin-top: 0.25rem;
  }

  .border-error {
    border-color: red !important;
  }
</style>
<div class="max-w-4xl mx-auto">
  <div class="mb-6">
    <h1 class="font-bold mb-10 text-2xl">Edit Product</h1>
  </div>
  <div class="bg-white rounded-lg shadow-lg overflow-hidden">
    <form id="productForm" class="p-8" action="/admin/product/edit/<%= product._id %>" method="POST"
      enctype="multipart/form-data">
      <div class="mb-8">
        <h2 class="text-lg font-semibold text-gray-900 mb-6">Basic Information</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Product Name</label>
            <input type="text" name="name" id="productName" value="<%= product.name %>"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            <div id="productNameError" class="error"></div>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Product Description</label>
            <input type="text" name="description" id="productDescription" value="<%= product.description %>"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            <div id="productDescriptionError" class="error"></div>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Category</label>
            <select name="category" id="category"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white">
              <% categories.forEach(category=> { %>
                <option value="<%= category._id %>" <%=category._id.toString()===(product.category ?
                  product.category.toString() : product.categoryId.toString()) ? "selected" : "" %>>
                  <%= category.name?.toUpperCase() %>
                </option>
                <% }) %>
            </select>
            <div id="categoryError" class="error"></div>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Brand</label>
            <input type="text" name="brand" id="brand" value="<%= product.brand %>"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            <div id="brandError" class="error"></div>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Price</label>
            <input type="number" name="price" id="price" value="<%= product.basePrice %>"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            <div id="priceError" class="error"></div>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Discount (%)</label>
            <input type="number" name="discount" id="discount" value="<%= product.discountPercentage %>"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            <div id="discountError" class="error"></div>
          </div>
        </div>
      </div>

      <!-- Product Images -->
      <div class="mb-8">
        <h2 class="text-lg font-semibold text-gray-900 mb-6">Product Images (Minimum 4)</h2>
        <div id="imageError" class="error mb-4"></div>
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
          <!-- Existing Images -->
          <% product.images.forEach((img, idx)=> { %>
            <div class="relative existing-image">
              <img src="/Uploads/<%= img %>" class="w-full h-full object-cover rounded-lg">
              <input type="hidden" name="images[<%= idx %>]" value="<%= img %>">
              <button type="button"
                class="replace-image absolute top-2 right-2 bg-blue-500 text-white text-xs font-bold px-2 py-1 rounded hover:bg-blue-600">Replace</button>
              <div class="absolute -top-2 -right-2 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center">
                <span class="text-white text-xs font-bold">
                  <%= idx+1 %>
                </span>
              </div>
            </div>
            <% }) %>
              <% for(let i=0; i < Math.max(0, 4 - product.images.length); i++) { %>
                <div
                  class="relative image-upload-slot rounded-lg flex flex-col items-center justify-center cursor-pointer hover:bg-gray-50 transition-colors">
                  <div class="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center mb-2">
                    <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                  </div>
                  <span class="text-xs text-gray-500 text-center">Add Image</span>
                  <input type="file" name="images[]" accept="image/*" class="hidden">
                  <div
                    class="absolute -top-2 -right-2 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center">
                    <span class="text-white text-xs font-bold">
                      <%= product.images.length + i + 1 %>
                    </span>
                  </div>
                </div>
                <% } %>
        </div>
      </div>

      <!-- Product Variants -->
      <div class="mb-8">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-lg font-semibold text-gray-900">Product Variants</h2>
          <button type="button"
            class="add-variant-btn px-4 py-2 text-sm font-medium text-blue-600 bg-blue-50 rounded-md hover:bg-blue-100 transition-colors">
            Add Variant
          </button>
        </div>
        <div class="overflow-x-auto">
          <table class="w-full">
            <thead>
              <tr class="border-b border-gray-200">
                <th class="text-left py-3 px-4">Size</th>
                <th class="text-left py-3 px-4">Additional Price</th>
                <th class="text-left py-3 px-4">Stock</th>
                <th></th>
              </tr>
            </thead>
            <tbody id="variantsTable">
              <% variants.forEach(variant=> { %>
                <tr class="border-b border-gray-100">
                  <td class="py-4 px-4">
                    <input name="size[]" type="text" value="<%= variant.size %>"
                      class="w-full px-3 py-2 border rounded-md">
                    <div class="error"></div>
                  </td>
                  <td class="py-4 px-4">
                    <input name="additionalPrice[]" type="number" value="<%= variant.additionalPrice %>"
                      class="w-full px-3 py-2 border rounded-md">
                    <div class="error"></div>
                  </td>
                  <td class="py-4 px-4">
                    <input name="stock[]" type="number" value="<%= variant.stock %>"
                      class="w-full px-3 py-2 border rounded-md">
                    <div class="error"></div>
                  </td>
                  <td class="py-4 px-4">
                    <button type="button" class="remove-variant text-red-500 hover:text-red-700">Remove</button>
                  </td>
                </tr>
                <% }) %>
            </tbody>
          </table>
        </div>
      </div>

      <!-- Form Actions -->
      <div class="flex items-center justify-end space-x-4 pt-6 border-t">
        <a href="/admin/product"><button type="button"
            class="px-6 py-2 text-sm font-medium text-gray-700 bg-white border rounded-md">Cancel</button></a>
        <button type="submit"
          class="px-6 py-2 text-sm font-medium text-white bg-yellow-500 rounded-md hover:bg-yellow-600">Update
          Product</button>
      </div>
    </form>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('productForm');
    const imageSlots = document.querySelectorAll('.image-upload-slot');

    // Validation function
    function validateForm() {
      let isValid = true;

      // Reset error states
      document.querySelectorAll('.error').forEach(error => error.textContent = '');
      document.querySelectorAll('input, select').forEach(input => input.classList.remove('border-error'));

      // Validate Product Name
      const productName = document.getElementById('productName');
      if (!productName.value.trim()) {
        document.getElementById('productNameError').textContent = 'Product name is required';
        productName.classList.add('border-error');
        isValid = false;
      } else if (/^\s+$/.test(productName.value)) {
        document.getElementById('productNameError').textContent = 'Product name cannot be only whitespace';
        productName.classList.add('border-error');
        isValid = false;
      }

      // Validate Product Description
      const productDescription = document.getElementById('productDescription');
      if (!productDescription.value.trim()) {
        document.getElementById('productDescriptionError').textContent = 'Product description is required';
        productDescription.classList.add('border-error');
        isValid = false;
      } else if (/^\s+$/.test(productDescription.value)) {
        document.getElementById('productDescriptionError').textContent = 'Product description cannot be only whitespace';
        productDescription.classList.add('border-error');
        isValid = false;
      }

      // Validate Category
      const category = document.getElementById('category');
      if (!category.value) {
        document.getElementById('categoryError').textContent = 'Please select a category';
        category.classList.add('border-error');
        isValid = false;
      }

      // Validate Brand
      const brand = document.getElementById('brand');
      if (!brand.value.trim()) {
        document.getElementById('brandError').textContent = 'Brand is required';
        brand.classList.add('border-error');
        isValid = false;
      } else if (/^\s+$/.test(brand.value)) {
        document.getElementById('brandError').textContent = 'Brand cannot be only whitespace';
        brand.classList.add('border-error');
        isValid = false;
      }

      // Validate Price
      const price = document.getElementById('price');
      if (!price.value || price.value < 0) {
        document.getElementById('priceError').textContent = 'Please enter a valid price (0 or greater)';
        price.classList.add('border-error');
        isValid = false;
      }

      // Validate Discount
      const discount = document.getElementById('discount');
      if (discount.value && (discount.value < 0 || discount.value > 100)) {
        document.getElementById('discountError').textContent = 'Discount must be between 0 and 100';
        discount.classList.add('border-error');
        isValid = false;
      }

      // Validate Images
      let imageCount = 0;
      // Count existing images (not replaced)
      document.querySelectorAll('.existing-image input[type="hidden"]').forEach(() => imageCount++);
      // Count new uploads
      document.querySelectorAll('.image-upload-slot input[type="file"]').forEach(input => {
        if (input.files && input.files.length > 0) {
          imageCount++;
        }
      });
      if (imageCount < 4) {
        document.getElementById('imageError').textContent = 'Please upload at least 4 images';
        isValid = false;
      }

      // Validate Variants
      const variantRows = document.querySelectorAll('#variantsTable tr');
      variantRows.forEach((row, index) => {
        const size = row.querySelector('input[name="size[]"]');
        const additionalPrice = row.querySelector('input[name="additionalPrice[]"]');
        const stock = row.querySelector('input[name="stock[]"]');
        const sizeError = row.querySelector('td:nth-child(1) .error');
        const priceError = row.querySelector('td:nth-child(2) .error');
        const stockError = row.querySelector('td:nth-child(3) .error');

        if (!size.value.trim() || /^\s+$/.test(size.value)) {
          sizeError.textContent = 'Size is required and cannot be only whitespace';
          size.classList.add('border-error');
          isValid = false;
        }

        if (!additionalPrice.value || additionalPrice.value < 0) {
          priceError.textContent = 'Additional price must be 0 or greater';
          additionalPrice.classList.add('border-error');
          isValid = false;
        }

        if (!stock.value || stock.value < 0 || !Number.isInteger(Number(stock.value))) {
          stockError.textContent = 'Stock must be a whole number (0 or greater)';
          stock.classList.add('border-error');
          isValid = false;
        }
      });

      return isValid;
    }

    // Form submission handler
    form.addEventListener('submit', function (e) {
      if (!validateForm()) {
        e.preventDefault();
      }
    });

    // Image upload functionality for new images
    imageSlots.forEach(slot => {
      slot.addEventListener('click', function () {
        let input = slot.querySelector('input[type="file"]');
        if (input) {
          input.click();
        }
      });

      const input = slot.querySelector('input[type="file"]');
      if (input) {
        input.addEventListener('change', function (e) {
          const file = e.target.files[0];
          if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
              const placeholders = slot.querySelectorAll('div:not(.image-upload-slot), span');
              placeholders.forEach(el => el.remove());
              const oldImg = slot.querySelector('img');
              if (oldImg) oldImg.remove();
              const img = document.createElement('img');
              img.src = e.target.result;
              img.classList.add('w-full', 'h-full', 'object-cover', 'rounded-lg');
              slot.insertBefore(img, input);
              validateForm(); // Re-validate on image upload
            };
            reader.readAsDataURL(file);
          }
        });
      }
    });

    // Replace existing image functionality
    const replaceImageButtons = document.querySelectorAll('.replace-image');
    replaceImageButtons.forEach(button => {
      button.addEventListener('click', function () {
        const imageContainer = button.closest('.existing-image');
        if (imageContainer) {
          // Get the index from the existing hidden input
          const hiddenInput = imageContainer.querySelector('input[type="hidden"]');
          const index = hiddenInput ? hiddenInput.name.match(/\d+/)[0] : null;

          // Remove existing image and button
          const img = imageContainer.querySelector('img');
          const replaceButton = imageContainer.querySelector('.replace-image');
          if (img) img.remove();
          if (replaceButton) replaceButton.remove();
          if (hiddenInput) hiddenInput.remove();

          // Add image-upload-slot class and content
          imageContainer.classList.remove('existing-image');
          imageContainer.classList.add('image-upload-slot', 'flex', 'flex-col', 'items-center', 'justify-center', 'cursor-pointer', 'hover:bg-gray-50', 'transition-colors');

          // Add placeholder content
          const placeholderDiv = document.createElement('div');
          placeholderDiv.classList.add('w-12', 'h-12', 'bg-gray-100', 'rounded-lg', 'flex', 'items-center', 'justify-center', 'mb-2');
          placeholderDiv.innerHTML = `
          <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
          </svg>
        `;
          const placeholderSpan = document.createElement('span');
          placeholderSpan.classList.add('text-xs', 'text-gray-500', 'text-center');
          placeholderSpan.textContent = 'Add Image';
          const fileInput = document.createElement('input');
          fileInput.type = 'file';
          fileInput.name = index ? `replaceImages[${index}]` : 'images[]';
          fileInput.accept = 'image/*';
          fileInput.classList.add('hidden');

          // Append new elements
          imageContainer.appendChild(placeholderDiv);
          imageContainer.appendChild(placeholderSpan);
          imageContainer.appendChild(fileInput);

          // Add click event to new input
          imageContainer.addEventListener('click', function () {
            fileInput.click();
          });

          fileInput.addEventListener('change', function (e) {
            const file = e.target.files[0];
            if (file) {
              const reader = new FileReader();
              reader.onload = function (e) {
                placeholderDiv.remove();
                placeholderSpan.remove();
                const oldImg = imageContainer.querySelector('img');
                if (oldImg) oldImg.remove();
                const newImg = document.createElement('img');
                newImg.src = e.target.result;
                newImg.classList.add('w-full', 'h-full', 'object-cover', 'rounded-lg');
                imageContainer.insertBefore(newImg, fileInput);
                validateForm(); // Re-validate on image replacement
              };
              reader.readAsDataURL(file);
            }
          });

          validateForm(); // Re-validate after replacing
        }
      });
    });

    // Add variant functionality
    const addVariantBtn = document.querySelector('.add-variant-btn');
    const tbody = document.querySelector('#variantsTable');

    addVariantBtn.addEventListener('click', function () {
      const newRow = tbody.querySelector('tr').cloneNode(true);
      newRow.querySelectorAll('input').forEach(input => {
        input.value = '';
        input.classList.remove('border-error');
      });
      newRow.querySelectorAll('.error').forEach(error => error.textContent = '');
      tbody.appendChild(newRow);
      validateForm(); // Re-validate after adding variant
    });

    tbody.addEventListener('click', function (e) {
      if (e.target.classList.contains('remove-variant')) {
        const tr = e.target.closest('tr');
        if (tbody.querySelectorAll('tr').length > 1) {
          tr.remove();
          validateForm(); // Re-validate after removing variant
        }
      }
    });

    // Real-time validation
    ['productName', 'productDescription', 'category', 'brand', 'price', 'discount'].forEach(id => {
      const input = document.getElementById(id);
      input.addEventListener('input', validateForm);
    });

    // Real-time validation for variants
    tbody.addEventListener('input', function (e) {
      if (e.target.name === 'size[]' || e.target.name === 'additionalPrice[]' || e.target.name === 'stock[]') {
        validateForm();
      }
    });
  });
</script>
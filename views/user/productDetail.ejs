<!-- views/product-detail.ejs -->
<div class="max-w-7xl mx-auto px-4 py-8">
  <div class="grid grid-cols-1 md:grid-cols-2 gap-10">

    <!-- Left: Product Images -->
<!-- Left: Product Images -->
<div>
  <div class="relative border rounded-lg overflow-visible group cursor-zoom-in">
    <img 
      id="mainImage"
      src="/uploads/<%= product.images[0]%>" 
      alt="<%= product.name %>" 
      class="w-full h-[400px] object-contain transition-transform duration-200 group-hover:scale-110"
    >
    <!-- Magnifier Lens (added here) -->
    <div id="magnifierLens" class="absolute w-32 h-32 rounded-full bg-white opacity-80 border-2 border-white shadow-lg overflow-hidden pointer-events-none hidden -translate-x-1/2 -translate-y-1/2 z-10">
      <img 
        id="zoomedImage"
        src="/uploads/<%= product.images[0] %>"
        alt="<%= product.name %> zoomed"
        class="absolute w-[800px] h-[800px] object-contain"
      >
    </div>
  </div>
  <div class="flex gap-3 mt-4">
    <% product.images.forEach(img => { %>
      <img 
        src="/uploads/<%= img %>" 
        class="w-20 h-20 border rounded-md cursor-pointer hover:ring-2 hover:ring-orange-500"
        onclick="updateMainImage('/uploads/<%= img %>')"
        alt="<%= product.name %> thumbnail"
      >
    <% }) %>
  </div>
</div>

    <!-- Right: Product Details -->
    <div>
      <h1 class="text-2xl font-bold mb-2"><%= product.name %></h1>
      <p class="text-gray-600 mb-4"><%= product.shortDesc %></p>

      <!-- Rating -->
      <div class="flex items-center gap-2 mb-4">
        <span class="text-yellow-400 text-lg">★</span>
        <span class="font-semibold"><%= product.rating %></span>
        <span class="text-gray-500 text-sm">(<%= product.reviews.length %> reviews)</span>
      </div>

      <!-- Price -->
      <div class="flex items-center gap-3 mb-4">
        <span class="text-2xl font-bold text-orange-600">₹<%= product.price %></span>
        <span class="line-through text-gray-400">₹<%= product.oldPrice %></span>
        <span class="text-green-600 font-medium"><%= product.discount %>% OFF</span>
      </div>

      <!-- Actions -->
      <div class="flex gap-4 mb-6">
        <form action="/cart/add" method="POST">
          <input type="hidden" name="productId" value="<%= product._id %>">
          <button type="submit" class="px-6 py-3 bg-orange-500 text-white rounded-xl hover:bg-orange-600 shadow-md">Add to Cart</button>
        </form>
        <button class="px-6 py-3 border rounded-xl hover:bg-gray-100">Buy Now</button>
      </div>

      <!-- Quantity -->
      <div class="flex items-center gap-3 mb-8">
        <label class="font-medium">Quantity:</label>
        <input type="number" name="qty" value="1" min="1" class="w-16 border rounded-md text-center">
      </div>

      <!-- Description -->
      <div class="prose max-w-none text-gray-700">
        <h2 class="font-bold text-lg mb-2">About this item</h2>
        <p><%= product.description %></p>
      </div>
    </div>
  </div>

    <!-- Related Products -->
  <div class="mt-12">
    <h2 class="text-xl font-bold mb-4">Related Products</h2>
    <div class="grid grid-cols-2 md:grid-cols-4 gap-6">
      <% relatedProducts.forEach(rp => { %>
        <div class="border rounded-lg p-4 hover:shadow-md">
          <img src="<%= rp.image %>" class="w-full h-40 object-contain mb-3">
          <p class="font-semibold text-sm"><%= rp.name %></p>
          <p class="text-orange-600 font-bold">₹<%= rp.price %></p>
        </div>
      <% }) %>
    </div>
  </div>
</div>


  <!-- Reviews -->
  <div class="mt-12">
    <h2 class="text-xl font-bold mb-4">Reviews</h2>
    <div class="space-y-4">
      <% product.reviews.forEach(review => { %>
        <div class="border p-4 rounded-lg shadow-sm">
          <div class="flex justify-between items-center mb-2">
            <p class="font-semibold"><%= review.user %></p>
            <span class="text-yellow-400">★ <%= review.rating %></span>
          </div>
          <p class="text-gray-600"><%= review.comment %></p>
        </div>
      <% }) %>
    </div>
  </div>

  <script>
  function updateMainImage(newSrc) {
    const mainImg = document.getElementById('mainImage');
    const zoomedImg = document.getElementById('zoomedImage');
    if (mainImg && zoomedImg) {
      mainImg.src = newSrc;
      zoomedImg.src = newSrc;
      // Reset on swap
      zoomedImg.style.left = '0px';
      zoomedImg.style.top = '0px';
    } else {
      console.error('Images not found for update');
    }
  }

  document.addEventListener('DOMContentLoaded', function() {
    const container = document.querySelector('.group');
    const mainImg = document.getElementById('mainImage');
    const lens = document.getElementById('magnifierLens');
    const zoomedImg = document.getElementById('zoomedImage');

    if (!container || !mainImg || !lens || !zoomedImg) {
      console.error('Magnifier elements missing:', { container, mainImg, lens, zoomedImg });
      return;
    }

    // Fix: Wait for image load before attaching events
    function initMagnifier() {
      if (mainImg.naturalWidth === 0) {
        console.warn('Image not loaded yet, retrying...');
        setTimeout(initMagnifier, 100); // Retry after 100ms
        return;
      }

      const zoomFactor = 2;
      const lensSize = 128; // w-32 = 128px

      container.addEventListener('mousemove', function(e) {
        const rect = container.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;

        // Clamp to bounds
        const clampedX = Math.max(lensSize / 2, Math.min(x, rect.width - lensSize / 2));
        const clampedY = Math.max(lensSize / 2, Math.min(y, rect.height - lensSize / 2));

        // Fix: Account for Tailwind translate (center lens on mouse)
        lens.style.left = `${clampedX}px`;
        lens.style.top = `${clampedY}px`;
        lens.classList.remove('hidden');

        // Crop calculation (now safe after load)
        const naturalWidth = mainImg.naturalWidth;
        const naturalHeight = mainImg.naturalHeight;
        const zoomedX = (x / rect.width) * naturalWidth * zoomFactor - (lensSize / 2);
        const zoomedY = (y / rect.height) * naturalHeight * zoomFactor - (lensSize / 2);

        zoomedImg.style.left = `-${Math.max(0, Math.min(zoomedX, naturalWidth * zoomFactor - lensSize))}px`;
        zoomedImg.style.top = `-${Math.max(0, Math.min(zoomedY, naturalHeight * zoomFactor - lensSize))}px`;
      });

      container.addEventListener('mouseleave', function() {
        lens.classList.add('hidden');
      });
    }

    // Trigger on load (or if already loaded)
    if (mainImg.complete) {
      initMagnifier();
    } else {
      mainImg.addEventListener('load', initMagnifier);
    }

    // Re-init on thumbnail swap
    mainImg.addEventListener('load', initMagnifier); // For new srcs
  });
</script>
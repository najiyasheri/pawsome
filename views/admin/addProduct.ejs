<div class="max-w-4xl mx-auto">
    <!-- Header -->
    <div class="mb-6">
        <h1 class="font-bold mb-10 text-2xl">Add Product</h1>
    </div>

    <!-- Main Form Card -->
    <div class="bg-white rounded-lg shadow-lg overflow-hidden">
        <form id="productForm" class="p-8" action="/admin/product/add" method="POST" enctype="multipart/form-data">
            <!-- Basic Information Section -->
            <div class="mb-8">
                <h2 class="text-lg font-semibold text-gray-900 mb-6">Basic Information</h2>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Product Name -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Product Name</label>
                        <input type="text" name="name" id="productName"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <div id="productNameError" class="error text-red-500"></div>
                    </div>

                    <!-- Product Description -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Product Description</label>
                        <input type="text" name="description" id="productDescription"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <div id="productDescriptionError" class="error text-red-500"></div>
                    </div>

                    <!-- Category -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Category</label>
                        <select name="category" id="category"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white">
                            <option value="">Select Category</option>
                            <% categories.forEach(category=> { %>
                                <option value="<%= category._id %>">
                                    <%= category.name?.toUpperCase() %>
                                </option>
                                <% }) %>
                        </select>
                        <div id="categoryError" class="error text-red-500"></div>
                    </div>

                    <!-- Brand -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Brand</label>
                        <input type="text" name="brand" id="brand"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <div id="brandError" class="error text-red-500"></div>
                    </div>

                    <!-- Offer -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Offer (Optional)</label>
                        <select name="offer" id="offer"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white">
                            <option value="">Select Offer</option>
                            <option>Electronics</option>
                            <option>Clothing</option>
                            <option>Home & Garden</option>
                            <option>Sports</option>
                        </select>
                    </div>

                    <!-- Return Within -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Return Within (in days)</label>
                        <input type="number" name="returnWithin" id="returnWithin" step="1" min="0"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <div id="returnWithinError" class="error text-red-500"></div>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Price</label>
                        <input type="number" name="price" id="price" step="0.01" min="0"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <div id="priceError" class="error text-red-500"></div>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Discount Percentage (0 -
                            100)</label>
                        <input type="number" name="discount" id="discount" step="0.01" min="0" max="100"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <div id="discountError" class="error text-red-500"></div>
                    </div>
                </div>
            </div>

            <!-- Product Images Section -->
            <div class="mb-8">
                <h2 class="text-lg font-semibold text-gray-900 mb-6">Product Images (Minimum 4)</h2>
                <div id="imageError" class="error text-red-500 mb-4"></div>
                <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <!-- Image Upload Slots -->
                    <div class="relative ">
                        <div
                            class="aspect-square image-upload-slot rounded-lg flex flex-col items-center justify-center cursor-pointer hover:bg-gray-50 transition-colors">
                            <div class="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center mb-2">
                                <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor"
                                    viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                        d="M12 4v16m8-8H4"></path>
                                </svg>
                            </div>
                            <span class="text-xs text-gray-500 text-center">Add Image</span>
                            <input type="file" id="imageInput" accept="image/*" name="images[]" style="display: none;">
                        </div>
                        <div
                            class="absolute -top-2 -right-2 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center">
                            <span class="text-white text-xs font-bold">1</span>
                        </div>
                    </div>

                    <div class="relative">
                        <div
                            class="aspect-square image-upload-slot rounded-lg flex flex-col items-center justify-center cursor-pointer hover:bg-gray-50 transition-colors">
                            <div class="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center mb-2">
                                <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor"
                                    viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                        d="M12 4v16m8-8H4"></path>
                                </svg>
                            </div>
                            <span class="text-xs text-gray-500 text-center">Add Image</span>
                            <input type="file" accept="image/*" name="images[]" style="display: none;">
                        </div>
                        <div
                            class="absolute -top-2 -right-2 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center">
                            <span class="text-white text-xs font-bold">2</span>
                        </div>
                    </div>

                    <div class="relative">
                        <div
                            class="aspect-square image-upload-slot rounded-lg flex flex-col items-center justify-center cursor-pointer hover:bg-gray-50 transition-colors">
                            <div class="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center mb-2">
                                <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor"
                                    viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                        d="M12 4v16m8-8H4"></path>
                                </svg>
                            </div>
                            <span class="text-xs text-gray-500 text-center">Add Image</span>
                            <input type="file" accept="image/*" name="images[]" style="display: none;">
                        </div>
                        <div
                            class="absolute -top-2 -right-2 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center">
                            <span class="text-white text-xs font-bold">3</span>
                        </div>
                    </div>

                    <div class="relative">
                        <div
                            class="aspect-square image-upload-slot rounded-lg flex flex-col items-center justify-center cursor-pointer hover:bg-gray-50 transition-colors">
                            <div class="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center mb-2">
                                <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor"
                                    viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                        d="M12 4v16m8-8H4"></path>
                                </svg>
                            </div>
                            <span class="text-xs text-gray-500 text-center">Add Image</span>
                            <input type="file" accept="image/*" name="images[]" style="display: none;">
                        </div>
                        <div
                            class="absolute -top-2 -right-2 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center">
                            <span class="text-white text-xs font-bold">4</span>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Modal -->
            <!-- Modal -->
            <div id="cropModal"
                class="fixed inset-0 z-50 hidden bg-black bg-opacity-70 flex items-center justify-center">
                <div class="bg-white p-6 rounded-xl max-w-[90%] max-h-[90%] flex flex-col items-center overflow-auto">
                    <!-- Cropping Image -->
                    <div class="w-full max-h-[70vh] flex justify-center mb-4">
                        <img id="cropImage" class="max-w-full max-h-full rounded-lg" />
                    </div>

                    <!-- Buttons -->
                    <div class="flex gap-3">
                        <button id="cancelCropBtn" type="button"
                            class="px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-800 font-medium rounded-lg transition">
                            Cancel
                        </button>
                        <button id="cropBtn" type="button"
                            class="px-5 py-2 bg-yellow-400 hover:bg-yellow-500 text-black font-semibold rounded-lg transition">
                            Crop & Use
                        </button>
                    </div>
                </div>
            </div>


            <!-- Product Variants Section -->
            <div class="mb-8">
                <div class="flex items-center justify-between mb-6">
                    <h2 class="text-lg font-semibold text-gray-900">Product Variants</h2>
                    <button type="button" id="addVariantBtn"
                        class="px-4 py-2 text-sm font-medium text-blue-600 bg-blue-50 rounded-md hover:bg-blue-100 transition-colors">
                        Add Variant
                    </button>
                </div>

                <!-- Variants Table -->
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead>
                            <tr class="border-b border-gray-200">
                                <th class="text-left py-3 px-4 font-medium text-gray-700 text-sm">Size</th>
                                <th class="text-left py-3 px-4 font-medium text-gray-700 text-sm">Additional Price</th>
                                <th class="text-left py-3 px-4 font-medium text-gray-700 text-sm">Stock</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody id="variantsTable">
                            <tr class="border-b border-gray-100">
                                <td class="py-4 px-4">
                                    <input name="size[]" type="text"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                    <div class="error text-red-500"></div>
                                </td>
                                <td class="py-4 px-4">
                                    <input name="additionalPrice[]" type="number" step="0.01" min="0"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                    <div class="error text-red-500"></div>
                                </td>
                                <td class="py-4 px-4">
                                    <input name="stock[]" type="number" step="1" min="0"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                    <div class="error text-red-500"></div>
                                </td>
                                <td class="py-4 px-4">
                                    <button type="button"
                                        class="remove-variant text-red-500 hover:text-red-700 text-sm">
                                        Remove Variant
                                    </button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Form Actions -->
            <div class="flex items-center justify-end space-x-4 pt-6 border-t border-gray-200">
                <a href="/admin/product"><button type="button"
                        class="px-6 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors">
                        Cancel
                    </button></a>
                <button type="submit"
                    class="px-6 py-2 text-sm font-medium text-white bg-yellow-500 rounded-md hover:bg-yellow-600 transition-colors">
                    Add Product
                </button>
            </div>
        </form>
    </div>
</div>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        const form = document.getElementById('productForm');
        const imageSlots = document.querySelectorAll('.image-upload-slot');
        const cropModal = document.getElementById('cropModal');
        const cropImage = document.getElementById('cropImage');
        const cropBtn = document.getElementById('cropBtn');
        const cancelCropBtn = document.getElementById('cancelCropBtn');
        const tbody = document.getElementById('variantsTable');

        let uploadedImages = 0;
        let cropper = null;
        let currentInput = null;

        // ---------------- VALIDATION ----------------

        const nameRegex = /^(?=.*[A-Za-z])[A-Za-z0-9]+(?: [A-Za-z0-9]+)*$/;
        function validateForm() {
            let isValid = true;
            document.querySelectorAll('.error').forEach(error => error.textContent = '');
            document.querySelectorAll('input, select').forEach(input => input.classList.remove('border-error'));

            const productName = document.getElementById('productName');
            if (!productName.value.trim()) {
                document.getElementById('productNameError').textContent = 'Product name is required';
                productName.classList.add('border-error');
                isValid = false;
            } else if (!nameRegex.test(productName.value)) {
                document.getElementById('productNameError').textContent = 'Only letters/numbers allowed';
                productName.classList.add('border-error');
                isValid = false;
            }

            const productDescription = document.getElementById('productDescription');
            if (!productDescription.value.trim()) {

                document.getElementById('productDescriptionError').textContent = 'Product description is required';
                productDescription.classList.add('border-error');
                isValid = false;
            } else if (!nameRegex.test(productDescription.value)) {
                document.getElementById('productDescriptionError').textContent = 'Only letters/numbers allowed';
                productDescription.classList.add('border-error');
                isValid = false;
            }

            const category = document.getElementById('category');
            if (!category.value) {
                document.getElementById('categoryError').textContent = 'Please select a category';
                category.classList.add('border-error');
                isValid = false;
            }

            const brand = document.getElementById('brand');
            if (!brand.value.trim()) {
                document.getElementById('brandError').textContent = 'Brand is required';
                brand.classList.add('border-error');
                isValid = false;
            } else if (!nameRegex.test(brand.value)) {
                document.getElementById('brandError').textContent = 'Only letters/numbers allowed';
                brand.classList.add('border-error');
                isValid = false;
            }

            const returnWithin = document.getElementById('returnWithin');
            if (returnWithin.value === '' || Number(returnWithin.value) < 0 || !Number.isInteger(Number(returnWithin.value))) {
                document.getElementById('returnWithinError').textContent = 'Enter valid days (whole number 0 or greater)';
                returnWithin.classList.add('border-error');
                isValid = false;
            }


            const price = document.getElementById('price');
            if (!price.value || price.value < 0) {
                document.getElementById('priceError').textContent = 'Price must be greater than 0';
                price.classList.add('border-error');
                isValid = false;
            }

            const discount = document.getElementById('discount');
            if (discount.value && (discount.value < 0 || discount.value > 100)) {
                document.getElementById('discountError').textContent = 'Discount must be between 0–100';
                discount.classList.add('border-error');
                isValid = false;
            }

            document.querySelectorAll('.existing-image input[type="hidden"]').forEach(() => uploadedImages++);
            // Count new or replaced images
            document.querySelectorAll('.image-upload-slot input[type="file"]').forEach(input => {
                if (input.files && input.files.length > 0) {
                    uploadedImages++;
                }
            });

            if (uploadedImages < 4) {
                console.log(uploadedImages, 'entering hereeeeeeeeeeeeeeeeee')
                document.getElementById('imageError').textContent = 'Upload at least 4 images';
                isValid = false;
            }

            const variantRows = document.querySelectorAll('#variantsTable tr');
            variantRows.forEach(row => {
                const size = row.querySelector('input[name="size[]"]');
                const additionalPrice = row.querySelector('input[name="additionalPrice[]"]');
                const stock = row.querySelector('input[name="stock[]"]');
                const sizeError = row.querySelector('td:nth-child(1) .error');
                const priceError = row.querySelector('td:nth-child(2) .error');
                const stockError = row.querySelector('td:nth-child(3) .error');

                if (!size.value.trim()) {
                    sizeError.textContent = 'Size required';
                    size.classList.add('border-error');
                    isValid = false;
                }
                else if (!nameRegex.test(size.value)) {
                    sizeError.textContent = 'Only letters/numbers allowed'
                    size.classList.add('border-error');
                    isValid = false;
                }
                if (!additionalPrice.value || additionalPrice.value < 0) {
                    priceError.textContent = 'Must be greater than 0';
                    additionalPrice.classList.add('border-error');
                    isValid = false;
                }
                if (!stock.value || stock.value < 0 || !Number.isInteger(Number(stock.value))) {
                    stockError.textContent = 'Stock must be whole number greater than 0';
                    stock.classList.add('border-error');
                    isValid = false;
                }
            });

            return isValid;
        }

        form.addEventListener('submit', e => {
            if (!validateForm()) e.preventDefault();
        });

        // ---------------- VARIANT HANDLING ----------------
        const addVariantBtn = document.getElementById('addVariantBtn');
        addVariantBtn.addEventListener('click', () => {
            const newRow = tbody.querySelector('tr').cloneNode(true);
            newRow.querySelectorAll('input').forEach(input => input.value = '');
            newRow.querySelectorAll('.error').forEach(error => error.textContent = '');
            tbody.appendChild(newRow);
        });

        tbody.addEventListener('click', e => {
            if (e.target.classList.contains('remove-variant')) {
                if (tbody.querySelectorAll('tr').length > 1) {
                    e.target.closest('tr').remove();
                }
            }
        });

        // ---------------- REAL-TIME VALIDATION ----------------
        ['productName', 'productDescription', 'category', 'brand', 'returnWithin', 'price', 'discount']
            .forEach(id => document.getElementById(id).addEventListener('input', validateForm));
        tbody.addEventListener('input', e => {
            if (['size[]', 'additionalPrice[]', 'stock[]'].includes(e.target.name)) validateForm();
        });

        imageSlots.forEach(slot => {
            const input = slot.querySelector('input[type="file"]');

            input.addEventListener('change', e => {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        cropImage.src = e.target.result;
                        currentInput = input;
                        cropModal.style.display = 'block';
                        if (cropper) cropper.destroy();
                        try {
                            cropper = new Cropper(cropImage, { aspectRatio: 1, viewMode: 1 });
                        } catch (error) {
                            console.error('Failed to initialize Cropper:', error);
                        }
                    };
                    reader.readAsDataURL(file);
                }
            });

            slot.addEventListener('click', () => input.click());
        });

        cropBtn.addEventListener('click', () => {
            if (!cropper || !currentInput) return;

            const canvas = cropper.getCroppedCanvas({ width: 500, height: 500 });
            if (canvas) {
                canvas.toBlob(blob => {
                    const slot = currentInput.closest('.image-upload-slot');

                    // Clear the slot content completely
                    slot.innerHTML = '';

                    // Insert new image
                    const img = document.createElement('img');
                    img.src = URL.createObjectURL(blob);
                    img.classList.add('w-full', 'h-full', 'object-cover', 'rounded-lg');
                    slot.appendChild(img);

                    // Re-add the input element (hidden)
                    slot.appendChild(currentInput);

                    // Update file input with cropped image
                    const file = new File([blob], currentInput.files[0].name, { type: 'image/jpeg' });
                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(file);
                    currentInput.files = dataTransfer.files;

                    // Increment uploaded images count if this is a new upload
                    const oldImg = slot.querySelector('img'); // Check if image was already there
                    if (!oldImg) uploadedImages++;

                    cropModal.style.display = 'none';
                    cropper.destroy();
                    cropper = null;
                    validateForm(); // Re-validate form
                }, 'image/jpeg');
            }
        });


        function closeCropModal(clearFile = false) {
            cropModal.style.display = 'none';

            if (cropper) {
                cropper.destroy();
                cropper = null;
            }

            if (clearFile && currentInput) {
                const slot = currentInput.closest('.image-upload-slot');
                const oldImg = slot.querySelector('img');
                const placeholderSvg = slot.querySelector('svg');
                const placeholderSpan = slot.querySelector('span');

                if (oldImg) {
                    oldImg.remove();
                    uploadedImages = Math.max(0, uploadedImages - 1); // Adjust count
                }

                if (placeholderSvg && placeholderSpan) {
                    placeholderSvg.classList.remove('hidden');
                    placeholderSpan.classList.remove('hidden');
                }

                currentInput.value = '';
            }
        }


        cancelCropBtn.addEventListener('click', () => closeCropModal(true));
        window.addEventListener('click', e => {
            if (e.target === cropModal) closeCropModal(true);
        });
        window.addEventListener('keydown', e => {
            if (e.key === 'Escape' && cropModal.style.display === 'block') closeCropModal(true);
        });
    });


</script>
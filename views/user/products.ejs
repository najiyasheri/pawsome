<section>
  <div class="flex items-center justify-between gap-6 overflow-x-auto whitespace-nowrap">

    <div class="bg-white p-4 mb-4 rounded-lg shadow-sm w-full">
      <form id="filterForm" class="flex items-center justify-between gap-2 overflow-x-auto whitespace-nowrap w-full">
      
        <div class="flex items-center gap-2">
          <input type="text" id="searchInput" name="search" placeholder="Search products..." class="px-4 py-2 border border-gray-300 rounded-l-lg 
                   focus:outline-none focus:ring-2 focus:ring-gray-50 focus:border-[#F9C22A] w-80" />
          <button type="submit" class="group px-6 py-2 bg-[#F9C22A] text-gray-700 rounded-r-lg 
                   hover:bg-[#d4a81f] focus:outline-none focus:border-2 focus:border-[#d4a81f]">
            <i class="fas fa-search group-hover:text-white"></i>
          </button>
        </div>

       
        <div class="flex items-center gap-4">
          <!-- Sort -->
          <div class="flex items-center gap-2 whitespace-nowrap">
            <label class="text-sm font-medium text-gray-700 w-16 text-right">Sort by:</label>
            <select id="sortSelect" name="sort" class="px-3 py-2 border border-gray-300 rounded-lg 
                     focus:outline-none focus:ring-2 focus:ring-[#F9C22A] focus:border-[#F9C22A] w-44">
              <option value="">Default</option>
              <option value="price-low">Price: Low to High</option>
              <option value="price-high">Price: High to Low</option>
              <option value="name-az">Name: A - Z</option>
              <option value="name-za">Name: Z - A</option>
            </select>
          </div>

          <!-- Category -->
          <div class="flex items-center gap-2 whitespace-nowrap">
            <label class="text-sm font-medium text-gray-700 w-16 text-right">Category:</label>
            <select id="categoryFilter" name="category" class="px-3 py-2 border border-gray-300 rounded-lg 
                     focus:outline-none focus:ring-2 focus:ring-[#F9C22A] focus:border-[#F9C22A] w-44">
              <option value="">All Categories</option>
              <% categories.forEach(cat=> { %>
                <option value="<%= cat._id %>">
                  <%= cat.name %>
                </option>
                <% }) %>
            </select>
          </div>

          <!-- Price Range -->
          <div class="flex items-center gap-2 whitespace-nowrap">
            <label class="text-sm font-medium text-gray-700 w-20 text-right">Price Range:</label>
            <select id="priceRangeFilter" name="priceRange" class="px-3 py-2 border border-gray-300 rounded-lg 
                     focus:outline-none focus:ring-2 focus:ring-[#F9C22A] focus:border-[#F9C22A] w-32">
              <option value="">All Prices</option>
              <option value="0-50">₹0 - ₹50</option>
              <option value="51-100">₹51 - ₹100</option>
              <option value="101-200">₹101 - ₹200</option>
              <option value="201-500">₹201 - ₹500</option>
            </select>
          </div>

          <!-- Clear All Filters -->
          <div id="clearFiltersContainer" class="hidden">
            <button type="button" id="clearFiltersBtn"
              class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 focus:outline-none">
              Clear All
            </button>
          </div>
        </div>
      </form>
    </div>
  </div>

  <!-- Products container -->
  <div
    class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 justify-items-center md:mx-20 mb-10 products-container">
  </div>

  <!-- Pagination -->
  <div class="flex justify-center pagination">
    <nav aria-label="Page navigation example">
      <ul class="flex items-center -space-x-px h-10 text-base"></ul>
    </nav>
  </div>

  <template id="product-template">
    <div class="w-full bg-white border border-gray-200 rounded-lg shadow-sm relative flex flex-col">
      <button class="absolute top-3 right-3 text-gray-400 hover:text-red-500 favorite-btn">
        <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="w-6 h-6 heart-icon" viewBox="0 0 24 24">
          <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 
                 2 5.42 4.42 3 7.5 3c1.74 0 3.41 0.81 4.5 2.09 
                 C13.09 3.81 14.76 3 16.5 3 
                 19.58 3 22 5.42 22 8.5 
                 c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" />
        </svg>
      </button>
      <a class="product-link">
        <img class="p-6 rounded-t-lg h-48 w-full object-contain product-img" alt="Product Image" />
      </a>
      <div class="px-5 pb-5 flex flex-col flex-1">
        <a class="product-link">
          <h5 class="text-lg font-semibold tracking-tight text-gray-900 line-clamp-2 h-14 leading-relaxed product-name">
            Product Name
          </h5>
        </a>
        <div class="flex items-center mt-2 mb-4">
          <span class="text-yellow-400 text-lg">★</span>
          <span class="text-gray-800 text-xs font-semibold px-2 py-0.5 rounded-sm">5.0</span>
        </div>
        <div class="mt-auto flex items-center justify-between">
          <div>
            <span class="text-xl font-bold text-black-600 product-price">₹0</span>
            <span class="line-through text-gray-400 old-price">₹0</span>
          </div>
          <a class="add-cart text-gray-900 bg-yellow-400 hover:bg-gray-600 focus:ring-4 
           focus:outline-none focus:ring-yellow-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center">
            Add to cart
          </a>
        </div>
      </div>
    </div>
  </template>
</section>

<script>
  async function fetchProducts(params = {}) {
    try {
      const { limit, ...userParams } = params;
      const cleanedParams = Object.fromEntries(
        Object.entries(userParams).filter(([_, v]) => v !== '' && v !== undefined)
      );
      if (limit) cleanedParams.limit = limit;

      const query = new URLSearchParams(cleanedParams).toString();

      const res = await fetch(`/products?${query}`, {
        headers: { "Accept": "application/json" }
      });

      if (!res.ok) throw new Error('Failed to fetch products');

      const data = await res.json();
      const container = document.querySelector(".products-container");
      container.innerHTML = "";
      const template = document.getElementById("product-template");

      data.products.forEach(p => {
        const clone = template.content.cloneNode(true);
        clone.querySelector(".product-link").href = `/product/${p._id}`;
        clone.querySelector(".product-img").src = `/Uploads/${p.images?.[0] || 'default.jpg'}`;
        clone.querySelector(".product-img").alt = p.name;
        clone.querySelector(".product-name").textContent = p.name;
        clone.querySelector(".product-price").textContent = `₹${p.price}`;
        clone.querySelector(".old-price").textContent = `₹${p.oldPrice}`;
        clone.querySelector(".add-cart").href = `/cart/add/${p._id}`;
        container.appendChild(clone);
      });

      const paginationList = document.querySelector(".pagination ul");
      paginationList.innerHTML = "";

      const prevLi = document.createElement("li");
      prevLi.innerHTML = `
        <button class="flex items-center justify-center px-4 h-10 leading-tight text-gray-500 bg-white border border-gray-300 rounded-l-lg hover:bg-gray-100 hover:text-gray-700
          ${data.currentPage <= 1 ? 'pointer-events-none opacity-50' : ''}"
          onclick="fetchProducts({...getCurrentFilters(), page: ${data.currentPage - 1}})">
          <span class="sr-only">Previous</span>
          <svg class="w-3 h-3" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 1 1 5l4 4" />
          </svg>
        </button>`;
      paginationList.appendChild(prevLi);

      for (let i = 1; i <= data.totalPages; i++) {
        const li = document.createElement("li");
        li.innerHTML = `
          <button class="flex items-center justify-center px-4 h-10 leading-tight border border-gray-100 
            ${i === data.currentPage ? 'bg-yellow-500 text-white' : 'bg-white hover:bg-gray-100'}"
            onclick="fetchProducts({...getCurrentFilters(), page: ${i}})">
            ${i}
          </button>`;
        paginationList.appendChild(li);
      }

      const nextLi = document.createElement("li");
      nextLi.innerHTML = `
        <button class="flex items-center justify-center px-4 h-10 leading-tight text-gray-500 bg-white border border-gray-300 rounded-r-lg hover:bg-gray-100 hover:text-gray-700
          ${data.currentPage >= data.totalPages ? 'pointer-events-none opacity-50' : ''}"
          onclick="fetchProducts({...getCurrentFilters(), page: ${data.currentPage + 1}})">
          <span class="sr-only">Next</span>
          <svg class="w-3 h-3" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4" />
          </svg>
        </button>`;
      paginationList.appendChild(nextLi);
      const clearContainer = document.querySelector("#clearFiltersContainer");
      const hasRealFilters = Object.entries(cleanedParams).some(([k, v]) => {
        return !["limit", "page"].includes(k) && v;
      });
      clearContainer.classList.toggle("hidden", !hasRealFilters);

    } catch (error) {
      console.error('Error fetching products:', error);
      const container = document.querySelector(".products-container");
      container.innerHTML = '<p class="text-red-500 text-center">Error loading products. Please try again.</p>';
    }
  }

  function getCurrentFilters(extra = {}) {
    const urlParams = new URLSearchParams(window.location.search);
    console.log(urlParams);
    return {
      search: document.getElementById("searchInput").value.trim() || urlParams.get("search") || "",
      sort: document.getElementById("sortSelect").value || urlParams.get("sort") || "",
      category: document.getElementById("categoryFilter").value || urlParams.get("category") || "",
      priceRange: document.getElementById("priceRangeFilter").value || urlParams.get("priceRange") || "",
      limit: 12,
      ...extra
    };
  }

  document.getElementById("filterForm").addEventListener("submit", e => {
    e.preventDefault();

    const searchValue = document.getElementById("searchInput").value.trim();
    if (searchValue.length === 0 && document.getElementById("searchInput").value !== "") {
      return;
    }
    fetchProducts(getCurrentFilters());
  });

  document.getElementById("sortSelect").addEventListener("change", () => {
    fetchProducts(getCurrentFilters());
  });

  document.getElementById("categoryFilter").addEventListener("change", () => {
    fetchProducts(getCurrentFilters());
  });

  document.getElementById("priceRangeFilter").addEventListener("change", () => {
    fetchProducts(getCurrentFilters());
  });

 document.getElementById("clearFiltersContainer").addEventListener("click", e => {
  if (e.target.id === "clearFiltersBtn") {
   
    document.getElementById("searchInput").value = "";
    document.getElementById("sortSelect").value = "";
    document.getElementById("categoryFilter").value = "";
    document.getElementById("priceRangeFilter").value = "";

    const baseUrl = window.location.pathname; 
    window.history.replaceState({}, "", baseUrl);
    fetchProducts({ limit: 12 });
  }
});

  fetchProducts(getCurrentFilters());
</script>
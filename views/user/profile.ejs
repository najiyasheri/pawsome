<button data-drawer-target="sidebar-multi-level-sidebar" data-drawer-toggle="sidebar-multi-level-sidebar"
   aria-controls="sidebar-multi-level-sidebar" type="button"
   class="inline-flex items-center p-2 mt-2 ms-3 text-sm text-gray-500 rounded-lg sm:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-yellow-400 dark:focus:ring-gray-600">
   <span class="sr-only">Open sidebar</span>
   <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
      <path clip-rule="evenodd" fill-rule="evenodd"
         d="M2 4.75A.75.75 0 012.75 4h14.5a.75.75 0 010 1.5H2.75A.75.75 0 012 4.75zm0 10.5a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5a.75.75 0 01-.75-.75zM2 10a.75.75 0 01.75-.75h14.5a.75.75 0 010 1.5H2.75A.75.75 0 012 10z">
      </path>
   </svg>
</button>

<aside id="sidebar-multi-level-sidebar"
   class="absolute top-0 left-0 z-40 mt-30 w-64 h-auto transition-transform -translate-x-full sm:translate-x-0"
   aria-label="Sidebar">
   <div class="h-full px-3 py-4 overflow-y-auto bg-gray-50 dark:bg-white">
      <ul class="space-y-2 font-medium">



         <li>
            <a href="/myOrders"
               class="flex items-center p-2 text-gray-900 rounded-lg dark:text-gray-800 hover:bg-gray-100 dark:hover:bg-yellow-400 group">
               <svg
                  class="shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
                  aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">

                  <path fill-rule="evenodd"
                     d="M14 7h-4v3a1 1 0 0 1-2 0V7H6a1 1 0 0 0-.997.923l-.917 11.924A2 2 0 0 0 6.08 22h11.84a2 2 0 0 0 1.994-2.153l-.917-11.924A1 1 0 0 0 18 7h-2v3a1 1 0 1 1-2 0V7Zm-2-3a2 2 0 0 0-2 2v1H8V6a4 4 0 0 1 8 0v1h-2V6a2 2 0 0 0-2-2Z"
                     clip-rule="evenodd" />



               </svg>
               <span class="flex-1 ms-3 whitespace-nowrap">Orders</span>

            </a>
         </li>
         <li>
            <a href="/profile"
               class="flex items-center p-2 text-gray-900 rounded-lg dark:text-gray-800 hover:bg-gray-100 dark:hover:bg-yellow-400 group">
               <svg
                  class="shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
                  aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 18">
                  <path
                     d="M14 2a3.963 3.963 0 0 0-1.4.267 6.439 6.439 0 0 1-1.331 6.638A4 4 0 1 0 14 2Zm1 9h-1.264A6.957 6.957 0 0 1 15 15v2a2.97 2.97 0 0 1-.184 1H19a1 1 0 0 0 1-1v-1a5.006 5.006 0 0 0-5-5ZM6.5 9a4.5 4.5 0 1 0 0-9 4.5 4.5 0 0 0 0 9ZM8 10H5a5.006 5.006 0 0 0-5 5v2a1 1 0 0 0 1 1h11a1 1 0 0 0 1-1v-2a5.006 5.006 0 0 0-5-5Z" />
               </svg>
               <span class="flex-1 ms-3 whitespace-nowrap">Update Profile</span>
            </a>
         </li>
         <li>
            <a href="#"
               class="flex items-center p-2 text-gray-900 rounded-lg dark:text-gray-800 hover:bg-gray-100 dark:hover:bg-yellow-400 group">
               <svg
                  class="shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
                  aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 20">

                  <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                     d="M17 8H5m12 0a1 1 0 0 1 1 1v2.6M17 8l-4-4M5 8a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.6M5 8l4-4 4 4m6 4h-4a2 2 0 1 0 0 4h4a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1Z" />


               </svg>
               <span class="flex-1 ms-3 whitespace-nowrap">Wallet</span>
            </a>
         </li>
         <li>
            <a href="#"
               class="flex items-center p-2 text-gray-900 rounded-lg dark:text-gray-800 hover:bg-gray-100 dark:hover:bg-yellow-400 group">
               <svg
                  class="shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
                  aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 22">

                  <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                     d="M7 6H5m2 3H5m2 3H5m2 3H5m2 3H5m11-1a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2M7 3h11a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1Zm8 7a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z" />



               </svg>
               <span class="flex-1 ms-3 whitespace-nowrap">My Address</span>
            </a>
         </li>
         <li>
            <a href="#"
               class="flex items-center p-2 text-gray-900 rounded-lg dark:text-gray-800 hover:bg-gray-100 dark:hover:bg-yellow-400 group">
               <svg
                  class="shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
                  aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">

                  <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                     d="M20 12H8m12 0-4 4m4-4-4-4M9 4H7a3 3 0 0 0-3 3v10a3 3 0 0 0 3 3h2" />


               </svg>
               <span class="flex-1 ms-3 whitespace-nowrap">Logout</span>
            </a>
         </li>
      </ul>
   </div>
</aside>


<div class="bg-white p-6 max-w-3xl mx-auto relative">
   <div class="flex space-x-1 mb-6">
      <h3 class="text-xl font-semibold text-gray-700">Your Profile</h3>
      <button id="editProfileBtn" class="text-gray-500 hover:text-yellow-500 text-md">
         <i class="fa-solid fa-pen"></i>
      </button>
   </div>

   <!-- Display mode -->
   <div id="profileView">
      <div class="flex items-center space-x-6 mb-5">
         <img src="/img/male.png" alt="Profile" class="w-24 h-24 rounded-full border">
         <div class="mt-1 mx-4">
            <h2 class="text-2xl font-semibold">
               <%= user.name %>
            </h2>
            <p class="text-gray-600 mt-2.5">
               <%= user.email %>
            </p>
         </div>
      </div>

      <!-- Added details -->
      <div class="mt-6 space-y-3 text-gray-700">
         <p><span class="font-semibold">Joined Date:</span>
            <%= new Date(user.createdAt).toLocaleDateString('en-IN', { day: '2-digit' , month: 'short' , year: 'numeric'
               }) %>
         </p>

         <p><span class="font-semibold">Default Address:</span>
            <% if (defaultAddress) { %>
               <%= defaultAddress.name %>,
                  <%= defaultAddress.address %>
                     <% } else { %>
                        <span class="text-gray-500 italic">No default address set</span>
                        <% } %>
         </p>
      </div>
   </div>

   <!-- Edit mode -->
   <div id="profileEdit" class="hidden">
      <form class="space-y-4" action="/profile" method="POST">
         <div>
            <label class="block text-sm font-medium text-gray-600">Name</label>
            <input name="name" type="text" value="<%= user.name %>"
               class="mt-1 w-full border rounded-lg px-4 py-2 focus:ring focus:ring-yellow-300">
         </div>

         <div class="relative mt-1 w-full">
            <label class="block text-sm font-medium text-gray-600">Email</label>
            <input id="emailInput" name="email" type="email" value="<%= user.email %>" disabled
               class="w-full border rounded-lg px-4 py-2 pr-20 bg-gray-100 text-gray-600 cursor-not-allowed">
            <button id="editEmailBtn" type="button"
               class="absolute mt-2.5 top-1/2 right-2 transform -translate-y-1/2 bg-yellow-400 text-white px-3 py-1 rounded hover:bg-yellow-500 text-sm">
               Change
            </button>
         </div>


         <!-- Joined date (read-only) -->
         <div>
            <label class="block text-sm font-medium text-gray-600">Joined Date</label>
            <input type="text"
               value="<%= new Date(user.createdAt).toLocaleDateString('en-IN', { day: '2-digit', month: 'short', year: 'numeric' }) %>"
               disabled class="mt-1 w-full border rounded-lg px-4 py-2 bg-gray-100 text-gray-600 cursor-not-allowed">
         </div>

         <!-- Default Address (read-only display) -->
         <div>
            <label class="block text-sm font-medium text-gray-600">Default Address</label>
            <% if (defaultAddress) { %>
               <textarea disabled rows="2"
                  class="mt-1 w-full border rounded-lg px-4 py-2 bg-gray-100 text-gray-600 cursor-not-allowed"><%= defaultAddress.name %>, <%= defaultAddress.address %></textarea>
               <% } else { %>
                  <input type="text" value="No default address set" disabled
                     class="mt-1 w-full border rounded-lg px-4 py-2 bg-gray-100 text-gray-500 cursor-not-allowed">
                  <% } %>
         </div>

         <div>
            <label class="block text-sm font-medium text-gray-600">Password Changes</label>
            <input name="currentPassword" type="password" placeholder="Current Password"
               class="mt-1 w-full border rounded-lg px-4 py-2 mb-2 focus:ring focus:ring-yellow-300">
            <input name="newPassword" type="password" placeholder="New Password"
               class="mt-1 w-full border rounded-lg px-4 py-2 mb-2 focus:ring focus:ring-yellow-300">
            <input name="confirmPassword" type="password" placeholder="Confirm New Password"
               class="mt-1 w-full border rounded-lg px-4 py-2 focus:ring focus:ring-yellow-300">
         </div>

         <div class="flex justify-end space-x-4 pt-4">
            <button type="button" id="cancelEditBtn"
               class="px-6 py-2 border border-gray-400 rounded-lg text-gray-600 hover:bg-gray-100">
               Cancel
            </button>
            <button type="submit" class="px-6 py-2 bg-yellow-400 text-white rounded-lg hover:bg-yellow-500">
               Save Changes
            </button>
         </div>
      </form>
   </div>
</div>

<!-- modal -->

<div id="emailModal" class="fixed inset-0 hidden flex items-center justify-center z-50 backdrop-blur-sm bg-black/40 ">
   <div class="bg-white rounded-lg shadow-lg w-96 p-6">
      <button id="closeModal" class="absolute top-2 right-2 text-gray-500 hover:text-gray-700">&times;</button>

      <h2 class="text-xl font-semibold mb-4 text-gray-700">Change Email</h2>
      <form id="emailChangeForm">
         <div class="mb-3">
            <!-- message -->
            <p class="text-center" id="mssg"></p>
            <label class="block text-sm font-medium text-gray-600">New Email</label>
            <input id="newEmail" type="email" placeholder="Enter new email"
               class="mt-1 w-full border rounded-lg px-4 py-2 focus:ring focus:ring-yellow-300" required>
         </div>
         <div class="mb-3">
            <button type="button" id="sendOtpBtn"
               class="w-full bg-yellow-400 text-white py-2 rounded-lg hover:bg-yellow-500">Send OTP</button>
         </div>
         <div id="otpSection" class="hidden">
            <label class="block text-sm font-medium text-gray-600">Enter OTP</label>
            <input id="otpInput" type="text" maxlength="6"
               class="mt-1 w-full border rounded-lg px-4 py-2 focus:ring focus:ring-yellow-300" placeholder="Enter OTP">
            <button type="submit" id="verifyOtpBtn"
               class="mt-3 w-full bg-yellow-500 text-white py-2 rounded-lg hover:bg-yellow-600">Verify & Save</button>

         </div>
         <div class="flex justify-between items-center mt-2">
            <button type="button" id="resendOtpBtn" disabled>Resend OTP</button>
            <span id="timer">00:30</span>
         </div>

         <input type="hidden" id="resendEmail" value="<%= user.email %>">
      </form>

   </div>
</div>
</div>


<script>
   const editBtn = document.getElementById('editProfileBtn');
   const cancelBtn = document.getElementById('cancelEditBtn');
   const profileView = document.getElementById('profileView');
   const profileEdit = document.getElementById('profileEdit');
   const mssg = document.getElementById('mssg')
   const newEmailInput = document.getElementById('newEmail');
   const emailInput = document.getElementById('emailInput');

   let interval;



   editBtn.addEventListener('click', () => {
      profileView.classList.add('hidden');
      profileEdit.classList.remove('hidden');
   });

   cancelBtn.addEventListener('click', () => {
      profileEdit.classList.add('hidden');
      profileView.classList.remove('hidden');
   });
   const emailModal = document.getElementById('emailModal');
   const editEmailBtn = document.getElementById('editEmailBtn');
   const closeModal = document.getElementById('closeModal');
   const sendOtpBtn = document.getElementById('sendOtpBtn');
   const otpSection = document.getElementById('otpSection');
   const verifyOtpBtn = document.getElementById('verifyOtpBtn')
   editEmailBtn.addEventListener('click', () => emailModal.classList.remove('hidden'));
   closeModal.addEventListener('click', () => emailModal.classList.add('hidden'));
   const resendOtpBtn = document.getElementById('resendOtpBtn');
   const timerEl = document.getElementById('timer');

   newEmailInput.addEventListener('input', () => {
      sendOtpBtn.disabled = false;
      sendOtpBtn.style.cursor = 'pointer';
      sendOtpBtn.style.backgroundColor = '#facc15';
      sendOtpBtn.textContent = 'Send OTP';
      mssg.textContent = '';

   });



   sendOtpBtn.addEventListener('click', async () => {
      const newEmail = document.getElementById('newEmail').value.trim();
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;


      if (!newEmail) {
         mssg.textContent = 'Please enter an email';
         mssg.style.color = 'red';
         return;
      }
      if (!emailRegex.test(newEmail)) {
         mssg.textContent = 'Invalid email format';
         mssg.style.color = 'red';
         return;
      }

      otpSection.classList.remove('hidden');
      sendOtpBtn.disabled = true;
      sendOtpBtn.style.cursor = 'not-allowed';
      sendOtpBtn.style.backgroundColor = 'grey';
      sendOtpBtn.textContent = 'Sending...';
 
      try {
         const response = await fetch('/profileOtp', {
            method: "POST",
            headers: {
               'Content-Type': 'application/json'
            },
            body: JSON.stringify({
               email: newEmail
            })
         });
         const data = await response.json();



         if (response.ok && data.success) {
            otpSection.classList.remove('hidden');
            mssg.textContent = data.message || 'OTP sent. Check your email.';
            mssg.style.color = 'green';
            sendOtpBtn.textContent = 'OTP sent';
            startResendTimer();
            
         } else {
            throw new Error(data.message || 'Failed to send OTP');
         }
      } catch (error) {
         console.error('OTP Error:', error);
         mssg.textContent = error.message || 'Failed to send OTP. Try again!';
         mssg.style.color = 'red';
         sendOtpBtn.disabled = false;
         sendOtpBtn.textContent = 'Send OTP';
      }
   });

   verifyOtpBtn.addEventListener('click', async (e) => {
      e.preventDefault();
      const otp = document.getElementById('otpInput').value.trim();
      const email = document.getElementById('newEmail').value.trim();
      const emailChageForm = document.getElementById('emailChangeForm')
      try {
         const response = await fetch('/profileOtp-verify', {
            method: "POST",
            headers: {
               'Content-Type': 'application/json'
            },
            body: JSON.stringify({
               otp,
               email
            })
         })
         const data = await response.json();
         if (response.ok && data.success) {
            emailModal.classList.add("hidden");
            emailInput.value = data.newEmail
           
            mssg.textContent = ''
            
            emailChangeForm.reset()
            resendOtpBtn.disabled = true;
            clearInterval(resendTimerInterval);
         } else {
            mssg.textContent = data.message || "Invalid OTP!";
            mssg.style.color = "red";
         }

      } catch (error) {
         console.error(error);
         mssg.textContent = "Something went wrong. Try again!";
         mssg.style.color = "red";
      }
   })

   resendOtpBtn.addEventListener('click', async () => {
      const email = newEmailInput.value.trim();
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

      // Validate email format
      if (!email) {
         mssg.textContent = 'Please enter an email';
         mssg.style.color = 'red';
         return;
      }
      if (!emailRegex.test(email)) {
         mssg.textContent = 'Invalid email format';
         mssg.style.color = 'red';
         return;
      }

      resendOtpBtn.disabled = true;
      resendOtpBtn.textContent = 'Resending...';
      

      try {
         const res = await fetch('/profileOtp-resend', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email })
         });
         const data = await res.json();

     
         if (data.success) {
            mssg.textContent = data.message || 'OTP resent successfully';
            mssg.style.color = 'green';
            otpInput.value = '';
            otpSection.classList.remove('hidden');
            startResendTimer();
         } else {
            throw new Error(data.message || 'Failed to resend OTP');
         }
      } catch (err) {
         console.error('Resend OTP error:', err);
         mssg.textContent = err.message || 'Failed to resend OTP';
         mssg.style.color = 'red';
         resendOtpBtn.disabled = false;
         resendOtpBtn.textContent = 'Resend OTP';
      }
   });

   // Timer for resend
   function startResendTimer() {
      let time = 30;
      resendOtpBtn.disabled = true;
      timerEl.textContent = `00:${time < 10 ? '0' + time : time}`;

      interval = setInterval(() => {
         time--;
         timerEl.textContent = `00:${time < 10 ? '0' + time : time}`;
         if (time <= 0) {
            clearInterval(interval);
            resendOtpBtn.disabled = false;
            resendOtpBtn.textContent = 'Resend OTP';
            timerEl.textContent = '';

         }
      }, 1000);
   }
</script>
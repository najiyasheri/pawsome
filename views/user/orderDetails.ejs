<div class="max-w-4xl mx-auto p-8 bg-white rounded-xl shadow-lg border border-gray-200">

    <!-- Order Summary -->
    <div class="mb-8 border-b border-gray-300 pb-4">
        <div class="gap-y-4 text-gray-700 space-y-3.5">

            <p class="text-2xl"><strong>Order</strong>
                #<%= order.orderId %>
            </p>
            <p><strong>Order Date:</strong>
                <%= order.createdAt.toLocaleDateString("en-IN") %>
            </p>
            <p><strong>Payment Method:</strong>
                <%= order.paymentMethod %>
            </p>
            <p><strong>Total:</strong> ₹<%= order.totalAmount %>
            </p>

            <p><strong>Coupon Discount:</strong> ₹<%= order.discountAmount %>
            </p>
            <p><strong>Final Amount:</strong> ₹<%= order.finalAmount %>
            </p>
            <p><strong>User:</strong>
                <%= order.userId.name %>
            </p>

            <!-- Order Status for Entire Order -->
            <% disableStatus=order.status==="Cancelled" ; %>

                <div class="mb-6 flex items-center gap-4">
                    <label for="order-status" class="font-medium text-gray-700">Order Status:</label>
                    <form action="/order/<%= order._id %>/update-status" method="POST" class="flex gap-2 items-center">
                        <span class="px-2 py-1 rounded 
                  <%= order.status === 'Pending' ? ' text-yellow-800' : '' %>
                  <%= order.status === 'Confirmed' ? ' text-blue-800' : '' %>
                  <%= order.status === 'Shipped' ? ' text-purple-800' : '' %>
                  <%= order.status === 'Delivered' ? ' text-green-800' : '' %>
                  <%= order.status === 'Cancelled' ? ' text-red-800' : '' %>
                ">
                            <%= order.status %>
                        </span>
                    </form>
                </div>


        </div>
        <button id="downloadInvoiceBtn" class="bg-yellow-300 text-white px-4 py-2 rounded-md hover:bg-yellow-400"
            data-order='<%- JSON.stringify(order).replace(/' /g, "&apos;" ) %>'>
            Download Invoice
        </button>
    </div>


    <!-- Order Items -->
    <div class="mb-8">
        <h2 class="text-xl font-semibold text-gray-800 mb-4">Order Items</h2>
        <div class="space-y-4">
            <% order.items.forEach(item=> { %>
                <div
                    class="flex flex-col sm:flex-row items-center justify-between border border-gray-100 rounded-lg p-4 bg-white hover:bg-gray-100 transition">
                    <div class="flex items-center gap-4 w-full sm:w-auto">
                        <% if(item.image) { %>
                            <img src="/uploads/<%= item.image %>" class="w-16 h-16 object-cover rounded-md border" />
                            <% } %>
                                <div>
                                    <p class="font-semibold text-gray-800">
                                        <%= item.name %>
                                    </p>
                                    <% if(item.variant) { %>
                                        <p class="text-sm text-gray-600">
                                            <% if(item.variant.size) { %>Size: <%= item.variant.size %>
                                                    <% } %>
                                                        <% if(item.variant.color) { %>, Color: <%= item.variant.color %>
                                                                <% } %>
                                        </p>
                                        <% } %>
                                            <p class="text-sm text-gray-600">Quantity: <%= item.quantity %>
                                            </p>
                                            <p class="text-sm text-gray-600">Price: ₹<%= item.price %>
                                            </p>
                                </div>
                    </div>

                    <div class="mt-3 sm:mt-0 text-right">
                        <p class="font-medium text-gray-700">Subtotal: ₹<%= item.subtotal %>
                        </p>

                        <% if (item.status==="Cancelled" ) { %>
                            <p class="text-red-600 text-sm font-medium mt-2">
                                Cancelled<br>
                                <span class="text-gray-600">Reason: <%= item.cancellationReason || "N/A" %></span>
                            </p>
                            <% } else if (item.status==="Delivered" || order.status==="Delivered" ) { %>
                                <% if (item.returnStatus==="Returned" || item.status==="Returned" ) { %>
                                    <button type="button"
                                        class="bg-gray-400 text-white px-4 py-1.5 rounded-md text-sm font-medium cursor-not-allowed"
                                        disabled>
                                        Returned
                                    </button>
                                    <% } else { %>
                                        <button type="button"
                                            class="return-item-btn bg-yellow-500 text-white px-4 py-1.5 rounded-md text-sm font-medium hover:bg-yellow-600 transition"
                                            data-action="/order/<%= order._id %>/return-item/<%= item._id %>">
                                            Return Item
                                        </button>
                                        <% } %> 
                                            <% } else { %>

                                                <button type="button"
                                                    class="cancel-item-btn bg-red-500 text-white px-4 py-1.5 rounded-md text-sm font-medium hover:bg-red-600 transition"
                                                    data-action="/order/<%= order._id %>/cancel-item/<%= item._id %>">
                                                    Cancel Item
                                                </button>
                                                <% } %>
                    </div>
                </div>
                <% }) %>
        </div>
    </div>

    <!-- Billing Details -->
    <div class="border-t pt-6 border-gray-300 pb-4">
        <h2 class="text-xl font-semibold text-gray-800 mb-4">Billing Details</h2>
        <div class="gap-y-2 text-gray-700 space-x-2.5">
            <p><strong>Name:</strong>
                <%= order.userId.name %>
            </p>
            <p><strong>Email:</strong>
                <%= order.userId.email || "N/A" %>
            </p>
        </div>
    </div>

    <!-- Billing Address -->
    <div class="mt-6">
        <h2 class="text-xl font-semibold text-gray-800 mb-4">Billing Address</h2>
        <div class="text-gray-700 space-y-1">
            <p><strong>Name:</strong>
                <%= order.address?.name || order.userId.name %>
            </p>
            <p><strong>Address:</strong>
                <%= order.address?.address || "N/A" %>
            </p>
        </div>
    </div>

    <!-- Cancel Entire Order Button -->
    <% if (order.status !=="Cancelled" ) { %>
        <div class="mt-8 text-center">
            <button type="button"
                class="cancel-order-btn bg-red-600 text-white px-5 py-2 rounded-md font-medium hover:bg-red-700 transition"
                data-action="/order/<%= order._id %>/cancel-all">
                Cancel Entire Order
            </button>
        </div>
        <% } else { %>
            <div class="mt-8 text-center">
                <p class="text-red-600 font-semibold">
                    Entire Order Cancelled
                </p>
                <p class="text-gray-700 mt-1">
                    Reason: <%= order.cancellationReason || "N/A" %>
                </p>
            </div>
            <% } %>


                <% if ( order.status==="Pending" && order.paymentMethod !=='COD' ) { %>
                    <div class="mt-8 text-center">
                        <button type="button"
                            class="retry-payment-btn bg-yellow-600 text-white px-5 py-2 rounded-md font-medium hover:bg-yellow-700 transition"
                            data-order-id="<%= order._id %>" data-total-amount="<%= order.finalAmount%>"
                            data-coupon-code="<%= order.couponCode || '' %>"
                            data-address-id="<%= order.address?._id || '' %>">
                            Retry Payment
                        </button>
                    </div>
                    <% } %>

                        <!-- Cancellation Modal -->
                        <div id="cancelModal"
                            class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
                            <div class="bg-white rounded-lg shadow-lg w-full max-w-md p-6 relative">
                                <h3 class="text-lg font-semibold mb-4">Cancellation Reason</h3>
                                <form id="cancelForm" method="POST">
                                    <textarea name="reason" required placeholder="Enter cancellation reason..."
                                        class="w-full border border-gray-300 rounded-md p-2 mb-4 focus:outline-none focus:ring-1 focus:ring-blue-500"></textarea>
                                    <div class="flex justify-end gap-2">
                                        <button type="button" id="cancelCloseBtn"
                                            class="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400">Close</button>
                                        <button type="submit"
                                            class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600">Confirm
                                            Cancel</button>
                                    </div>
                                </form>
                            </div>
                        </div>

                        <!-- Return Item Modal -->
                        <div id="returnModal"
                            class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
                            <div class="bg-white rounded-lg shadow-lg w-full max-w-md p-6 relative">
                                <h3 class="text-lg font-semibold mb-4">Return Item</h3>
                                <form id="returnForm" method="POST">
                                    <textarea name="reason" required placeholder="Enter reason for return..."
                                        class="w-full border border-gray-300 rounded-md p-2 mb-4 focus:outline-none focus:ring-1 focus:ring-yellow-500"></textarea>
                                    <div class="flex justify-end gap-2">
                                        <button type="button" id="returnCloseBtn"
                                            class="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400">Close</button>
                                        <button type="submit"
                                            class="px-4 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600">
                                            Confirm Return
                                        </button>
                                    </div>
                                </form>
                            </div>
                        </div>



                        <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
                        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
                        <script>
                            const cancelModal = document.getElementById('cancelModal');
                            const cancelForm = document.getElementById('cancelForm');
                            const cancelCloseBtn = document.getElementById('cancelCloseBtn');

                            // Open modal for individual items
                            document.querySelectorAll('.cancel-item-btn').forEach(btn => {
                                btn.addEventListener('click', () => {
                                    cancelForm.action = btn.dataset.action; // set form action dynamically
                                    cancelModal.classList.remove('hidden');
                                });
                            });

                            // Open modal for entire order
                            document.querySelectorAll('.cancel-order-btn').forEach(btn => {
                                btn.addEventListener('click', () => {
                                    cancelForm.action = btn.dataset.action; // set form action dynamically
                                    cancelModal.classList.remove('hidden');
                                });
                            });

                            // Close modal
                            cancelCloseBtn.addEventListener('click', () => {
                                cancelModal.classList.add('hidden');
                                cancelForm.action = '';
                                cancelForm.reset();
                            });

                            // -------------------- Return Item Modal --------------------
                            const returnModal = document.getElementById('returnModal');
                            const returnForm = document.getElementById('returnForm');
                            const returnCloseBtn = document.getElementById('returnCloseBtn');

                            // Open modal when clicking "Return Item"
                            document.querySelectorAll('.return-item-btn').forEach(btn => {
                                btn.addEventListener('click', () => {
                                    returnForm.action = btn.dataset.action; // dynamically set form action URL
                                    returnModal.classList.remove('hidden');
                                });
                            });

                            // Close modal
                            returnCloseBtn.addEventListener('click', () => {
                                returnModal.classList.add('hidden');
                                returnForm.action = '';
                                returnForm.reset();
                            });

                            // Handle return submit
                            returnForm.addEventListener('submit', async (e) => {
                                e.preventDefault();
                                const action = returnForm.action;
                                const reason = returnForm.querySelector('textarea').value.trim();

                                if (!reason) return alert("Please provide a return reason.");

                                try {
                                    const response = await fetch(action, {
                                        method: 'POST',
                                        headers: { 'Content-Type': 'application/json' },
                                        body: JSON.stringify({ reason })
                                    });

                                    const data = await response.json();
                                    if (data.success) {
                                        alert('Return processed successfully!');
                                        location.reload();
                                    } else {
                                        alert(data.message || 'Failed to process return.');
                                    }
                                } catch (err) {
                                    console.error('Return error:', err);
                                    alert('Error while processing return.');
                                }
                            });





                            // Enhanced Download Invoice logic
                            const downloadBtn = document.getElementById("downloadInvoiceBtn");

                            if (!window.jspdf || !window.jspdf.jsPDF) {
                                console.error("jsPDF library is not loaded.");
                                alert("Failed to load jsPDF library. Please try again later.");
                            } else if (downloadBtn) {
                                const { jsPDF } = window.jspdf;

                                downloadBtn.addEventListener("click", () => {
                                    try {
                                        // Parse order data safely
                                        let orderData;
                                        try {
                                            orderData = JSON.parse(downloadBtn.dataset.order);
                                        } catch (e) {
                                            console.error("Failed to parse order data:", e);
                                            alert("Invalid order data. Please check the server configuration.");
                                            return;
                                        }

                                        const doc = new jsPDF();
                                        const pageWidth = doc.internal.pageSize.width;
                                        const pageHeight = doc.internal.pageSize.height;
                                        let y = 20;

                                        // Colors
                                        const primaryColor = [255, 191, 0];
                                        const secondaryColor = [52, 73, 94]; // Dark gray
                                        const lightGray = [236, 240, 241];
                                        const successColor = [39, 174, 96];
                                        const dangerColor = [231, 76, 60];

                                        // Header Section with Company Branding
                                        doc.setFillColor(...primaryColor);
                                        doc.rect(0, 0, pageWidth, 40, 'F');

                                        doc.setTextColor(255, 255, 255);
                                        doc.setFontSize(24);
                                        doc.setFont(undefined, 'bold');
                                        doc.text("INVOICE", 20, 25);

                                        doc.setFontSize(10);
                                        doc.setFont(undefined, 'normal');
                                        doc.text("Pawsome", pageWidth - 20, 20, { align: 'right' });
                                        doc.text("www.pawsome.com", pageWidth - 20, 26, { align: 'right' });
                                        doc.text("support@pawsome.com", pageWidth - 20, 32, { align: 'right' });

                                        y = 55;

                                        // Invoice Details Box
                                        doc.setDrawColor(...secondaryColor);
                                        doc.setLineWidth(0.5);
                                        doc.line(20, y, pageWidth - 20, y);
                                        y += 10;

                                        // Two-column layout for invoice info
                                        doc.setTextColor(...secondaryColor);
                                        doc.setFontSize(10);
                                        doc.setFont(undefined, 'bold');

                                        // Left column
                                        doc.text("Invoice Number:", 20, y);
                                        doc.text("Invoice Date:", 20, y + 7);
                                        doc.text("Payment Method:", 20, y + 14);

                                        doc.setFont(undefined, 'normal');
                                        doc.text(`#${orderData.orderId || "N/A"}`, 65, y);
                                        doc.text(orderData.createdAt ? new Date(orderData.createdAt).toLocaleDateString("en-IN") : "N/A", 65, y + 7);
                                        doc.text(orderData.paymentMethod || "N/A", 65, y + 14);

                                        // Right column - Total in a box
                                        const totalAmount = Number(orderData.totalAmount || 0).toFixed(2);
                                        doc.setFillColor(...primaryColor);
                                        doc.roundedRect(pageWidth - 70, y - 5, 50, 25, 3, 3, 'F');
                                        doc.setTextColor(255, 255, 255);
                                        doc.setFontSize(10);
                                        doc.text("TOTAL", pageWidth - 45, y + 2, { align: 'center' });
                                        doc.setFontSize(16);
                                        doc.setFont(undefined, 'bold');
                                        doc.text(`Rs. ${totalAmount}`, pageWidth - 45, y + 12, { align: 'center' });

                                        y += 35;

                                        // Billing Information Section
                                        doc.setFillColor(...lightGray);
                                        doc.rect(20, y, (pageWidth - 50) / 2, 35, 'F');
                                        doc.rect(25 + (pageWidth - 50) / 2, y, (pageWidth - 50) / 2, 35, 'F');

                                        doc.setTextColor(...primaryColor);
                                        doc.setFontSize(11);
                                        doc.setFont(undefined, 'bold');
                                        doc.text("BILL TO", 25, y + 8);
                                        doc.text("SHIPPING ADDRESS", 30 + (pageWidth - 50) / 2, y + 8);

                                        doc.setTextColor(...secondaryColor);
                                        doc.setFontSize(9);
                                        doc.setFont(undefined, 'normal');

                                        // Bill To details
                                        doc.text(orderData.userId?.name || "N/A", 25, y + 16);
                                        doc.text(orderData.userId?.email || "N/A", 25, y + 22);

                                        // Shipping Address
                                        const addressName = orderData.address?.name || orderData.userId?.name || "N/A";
                                        const address = orderData.address?.address || "N/A";
                                        doc.text(addressName, 30 + (pageWidth - 50) / 2, y + 16);
                                        const addressLines = doc.splitTextToSize(address, (pageWidth - 60) / 2 - 10);
                                        doc.text(addressLines, 30 + (pageWidth - 50) / 2, y + 22);

                                        y += 50;

                                        // Order Items Table
                                        doc.setFillColor(...primaryColor);
                                        doc.rect(20, y, pageWidth - 40, 10, 'F');

                                        doc.setTextColor(255, 255, 255);
                                        doc.setFontSize(10);
                                        doc.setFont(undefined, 'bold');
                                        doc.text("ITEM", 25, y + 7);
                                        doc.text("QTY", pageWidth - 95, y + 7);
                                        doc.text("PRICE", pageWidth - 70, y + 7);
                                        doc.text("SUBTOTAL", pageWidth - 35, y + 7, { align: 'right' });

                                        y += 15;
                                        doc.setTextColor(...secondaryColor);
                                        doc.setFont(undefined, 'normal');

                                        if (orderData.items && Array.isArray(orderData.items) && orderData.items.length > 0) {
                                            orderData.items.forEach((item, i) => {
                                                if (y > 240) {
                                                    doc.addPage();
                                                    y = 20;
                                                }

                                                const quantity = Number(item.quantity || 0);
                                                const price = Number(item.price || 0).toFixed(2);
                                                const subtotal = Number(item.subtotal || quantity * item.price).toFixed(2);

                                                // Alternating row background
                                                if (i % 2 === 0) {
                                                    doc.setFillColor(...lightGray);
                                                    doc.rect(20, y - 5, pageWidth - 40, 10, 'F');
                                                }

                                                doc.setFontSize(9);

                                                // Item name with variant
                                                let itemName = item.productId?.name || "Product";
                                                if (item.variant) {
                                                    const variantText = [
                                                        item.variant.size ? `Size: ${item.variant.size}` : "",
                                                        item.variant.color ? `Color: ${item.variant.color}` : ""
                                                    ].filter(Boolean).join(", ");
                                                    if (variantText) itemName += ` (${variantText})`;
                                                }

                                                const itemLines = doc.splitTextToSize(itemName, 80);
                                                doc.text(itemLines, 25, y + 2);

                                                doc.text(quantity.toString(), pageWidth - 90, y + 2);
                                                doc.text(`Rs. ${price}`, pageWidth - 65, y + 2);
                                                doc.text(`Rs. ${subtotal}`, pageWidth - 25, y + 2, { align: 'right' });

                                                // Cancellation status
                                                if (item.status === "Cancelled") {
                                                    doc.setTextColor(...dangerColor);
                                                    doc.setFontSize(8);
                                                    doc.text(`Cancelled: ${item.cancellationReason || "N/A"}`, 25, y + 8);
                                                    doc.setTextColor(...secondaryColor);
                                                }

                                                y += itemLines.length > 1 ? 15 : 12;
                                            });
                                        } else {
                                            doc.text("No items found in this order.", 25, y);
                                            y += 10;
                                        }

                                        // Total Summary Section
                                        y += 10;
                                        doc.setLineWidth(0.5);
                                        doc.setDrawColor(...secondaryColor);
                                        doc.line(pageWidth - 90, y, pageWidth - 20, y);
                                        y += 8;

                                        doc.setFontSize(10);
                                        doc.setFont(undefined, 'bold');
                                        doc.text("TOTAL:", pageWidth - 70, y);
                                        doc.setFontSize(12);
                                        doc.setTextColor(...primaryColor);
                                        doc.text(`Rs. ${totalAmount}`, pageWidth - 25, y, { align: 'right' });

                                        // Cancelled Order Notice
                                        if (orderData.status === "Cancelled") {
                                            y += 15;
                                            doc.setFillColor(255, 235, 238);
                                            doc.setDrawColor(...dangerColor);
                                            doc.setLineWidth(1);
                                            doc.roundedRect(20, y, pageWidth - 40, 20, 3, 3, 'FD');

                                            doc.setTextColor(...dangerColor);
                                            doc.setFontSize(11);
                                            doc.setFont(undefined, 'bold');
                                            doc.text("ORDER CANCELLED", 25, y + 8);
                                            doc.setFontSize(9);
                                            doc.setFont(undefined, 'normal');
                                            doc.text(`Reason: ${orderData.cancellationReason || "N/A"}`, 25, y + 15);
                                        }

                                        // Footer
                                        const footerY = pageHeight - 20;
                                        doc.setFontSize(8);
                                        doc.setTextColor(150, 150, 150);
                                        doc.setFont(undefined, 'italic');
                                        doc.text("Thank you for your business!", pageWidth / 2, footerY, { align: 'center' });
                                        doc.text(`Generated on ${new Date().toLocaleDateString("en-IN")} at ${new Date().toLocaleTimeString("en-IN")}`, pageWidth / 2, footerY + 5, { align: 'center' });

                                        // Save PDF
                                        doc.save(`invoice_${orderData.orderId || "unknown"}.pdf`);
                                        console.log("PDF downloaded successfully");
                                    } catch (e) {
                                        console.error("Failed to generate PDF:", e);
                                        alert("Failed to download invoice. Check console for details.");
                                    }
                                });
                            } else {
                                console.error("Download Invoice button not found.");
                                alert("Download Invoice button not found.");
                            }

                            document.querySelectorAll('.retry-payment-btn').forEach(btn => {
                                btn.addEventListener('click', async () => {
                                    try {
                                        const orderId = btn.dataset.orderId;
                                        const totalAmount = btn.dataset.totalAmount;
                                        const couponCode = btn.dataset.couponCode;
                                        const addressId = btn.dataset.addressId;

                                        // Make API call to initiate retry payment
                                        const res = await fetch('/retry-payment', {
                                            method: 'POST',
                                            headers: { 'Content-Type': 'application/json' },
                                            body: JSON.stringify({ orderId, totalAmount, addressId, couponCode })
                                        });
                                        const data = await res.json();

                                        if (!data.success) {
                                            alert("Error initiating retry payment. Please try again.");
                                            return;
                                        }

                                        // Razorpay payment options
                                        const options = {
                                            key: data.key,
                                            amount: data.razorpayOrder.amount,
                                            currency: data.razorpayOrder.currency,
                                            name: "Pawsome",
                                            description: "Retry Order Payment",
                                            order_id: data.razorpayOrder.id,
                                            handler: async function (response) {
                                                const verifyRes = await fetch('/verify-payment', {
                                                    method: 'POST',
                                                    headers: { 'Content-Type': 'application/json' },
                                                    body: JSON.stringify({
                                                        razorpay_payment_id: response.razorpay_payment_id,
                                                        razorpay_order_id: response.razorpay_order_id,
                                                        razorpay_signature: response.razorpay_signature,
                                                        orderId: data.orderId,
                                                        couponCode
                                                    })
                                                });
                                                const verifyData = await verifyRes.json();
                                                alert(verifyData.message);
                                                if (verifyData.success) {
                                                    window.location.href = '/orders';
                                                }
                                            },
                                            prefill: {
                                                name: "<%= order.userId.name %>",
                                                email: "<%= order.userId.email || '' %>"
                                            },
                                            theme: { color: "#FBBF24" }
                                        };

                                        const rzp = new Razorpay(options);
                                        rzp.open();
                                    } catch (err) {
                                        console.error('Retry payment error:', err);
                                        alert("Something went wrong with retry payment. Please try again.");
                                    }
                                });
                            });
                        </script>